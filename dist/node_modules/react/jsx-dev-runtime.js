(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["jsx-dev-runtime"] = {}));
})(this, (function (exports) { 'use strict';

  const supportSymbol = typeof Symbol === 'function' && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for('react.element')
      : 0xeac7;

  // ReactElement
  const ReactElement = function (type, key, ref, props) {
      const element = {
          // The type of the element, e.g., 'div', 'span', or a component
          type: type,
          // The key is used to help React identify which items have changed, are added, or are removed
          key: key,
          // The ref is used to reference a DOM element or a class component
          ref: ref,
          // The props are the properties or attributes of the element
          props: props,
          // A special property to identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          __mark: 'KaSong'
      };
      return element;
  };
  const jsx = (type, config, ...maybeChildren) => {
      let key = null;
      let ref = null;
      const props = {};
      for (const prop in config) {
          const val = config[prop];
          if (prop === 'key') {
              if (val != undefined) {
                  key = '' + val;
              }
              continue;
          }
          if (prop === 'ref') {
              if (val != undefined) {
                  ref = val;
              }
              continue;
          }
          if ({}.hasOwnProperty.call(config, prop)) {
              props[prop] = val;
          }
      }
      const maybeChildrenLength = maybeChildren.length;
      if (maybeChildrenLength) {
          props.children = maybeChildrenLength === 1 ? maybeChildren[0] : maybeChildren;
      }
      return ReactElement(type, key, ref, props);
  };
  const jsxDEV = jsx;

  exports.jsx = jsx;
  exports.jsxDEV = jsxDEV;

}));
