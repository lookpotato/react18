{"code":"import { beginWork } from \"./beginWork\";\nimport { createWorkInProgress } from \"./fiber\";\nimport { completeWork } from \"./completeWork\";\nimport { HostRoot } from \"./workTags\";\nimport { commitRoot } from \"./commitWork\";\nlet workInProgressRenderLanes = 0;\nconst NoLanes = 0;\nlet workInProgress = null;\nfunction prepareFreshStack(root) {\n    workInProgress = createWorkInProgress(root.current, {});\n    workInProgressRenderLanes = NoLanes;\n}\nexport function scheduleUpdateOnFiber(fiber) {\n    // 调度\n    const root = markUpdateFromFiberToRoot(fiber);\n    if (root !== null) {\n        renderRoot(root);\n    }\n}\nfunction markUpdateFromFiberToRoot(fiber) {\n    let node = fiber;\n    let parent = node.return;\n    while (parent !== null) {\n        node = parent;\n        parent = node.return;\n    }\n    if (node.tag === HostRoot) {\n        return node.stateNode;\n    }\n    return null;\n}\nfunction renderRoot(root) {\n    // 初始化\n    prepareFreshStack(root);\n    do {\n        try {\n            workLoop();\n            break;\n        }\n        catch (e) {\n            if (__DEV__) {\n                console.warn('workLoop发生错误', e);\n            }\n            workInProgress = null;\n        }\n    } while (true);\n    const finishedWork = root.current.alternate;\n    root.finishedWork = finishedWork;\n    // wip fiber树 变成 fiberRootNode树\n    commitRoot(root);\n}\nfunction workLoop() {\n    while (workInProgress !== null) {\n        performUnitOfWork(workInProgress);\n    }\n}\nfunction performUnitOfWork(fiber) {\n    const next = beginWork(fiber, workInProgressRenderLanes);\n    fiber.memoizedProps = fiber.pendingProps;\n    if (next === null) {\n        completeUnitOfWork(fiber);\n    }\n    else {\n        workInProgress = next;\n    }\n}\nfunction completeUnitOfWork(fiber) {\n    let node = fiber;\n    do {\n        completeWork(node);\n        const sibling = node.sibling;\n        if (sibling !== null) {\n            workInProgress = sibling;\n            return;\n        }\n        node = node.return;\n        workInProgress = node;\n    } while (node !== null);\n}\n","references":["C:/syp/react18/packages/react/react-reconciler/src/beginWork.ts","C:/syp/react18/packages/react/react-reconciler/src/fiber.ts","C:/syp/react18/packages/react/react-reconciler/src/completeWork.ts","C:/syp/react18/packages/react/react-reconciler/src/workTags.ts","C:/syp/react18/packages/react/react-reconciler/src/commitWork.ts","C:/syp/react18/packages/react/react-reconciler/src/fiberFlags.ts"]}
