{"code":"import { createInstance, createTextInstance, appendInitialChild } from '../../react-dom/src/hostConfig';\nimport { HostComponent, HostText, HostRoot } from './workTags';\nimport { NoFlags } from './fiberFlags';\nexport const completeWork = (wip) => {\n    // 递归中的归\n    const newProps = wip.pendingProps;\n    const current = wip.alternate;\n    switch (wip.tag) {\n        case HostComponent:\n            if (current !== null && wip.stateNode) {\n                // update\n            }\n            else {\n                // 1. 构建DOM\n                // 2. 将DOM插入到DOM树中\n                const instance = createInstance(wip.type);\n                appendAllChildren(instance, wip);\n                wip.stateNode = instance;\n            }\n            bubbleProperties(wip);\n            return null;\n        case HostText:\n            if (current !== null && wip.stateNode) {\n                // update\n            }\n            else {\n                // mount\n                const instance = createTextInstance(newProps.content);\n                wip.stateNode = instance;\n            }\n            bubbleProperties(wip);\n            return null;\n        case HostRoot:\n            bubbleProperties(wip);\n            return null;\n        default:\n            if (__DEV__) {\n                console.warn('未处理的completeWork类型', wip);\n            }\n            return null;\n    }\n};\nfunction appendAllChildren(parent, wip) {\n    let node = wip.child;\n    while (node !== null) {\n        if (node.tag === HostComponent || node.tag === HostText) {\n            if (node.stateNode) {\n                appendInitialChild(parent, node.stateNode);\n            }\n        }\n        else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n        }\n        if (node === wip) {\n            return;\n        }\n        while (node.sibling === null) {\n            if (node.return === null || node.return === wip) {\n                return;\n            }\n            node = node.return;\n        }\n        node.sibling.return = node.return;\n        node = node.sibling;\n    }\n}\nfunction bubbleProperties(wip) {\n    let subtreeFlags = NoFlags;\n    let child = wip.child;\n    while (child !== null) {\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n        child.return = wip;\n        child = child.sibling;\n    }\n    wip.subtreeFlags = subtreeFlags;\n}\n","references":["C:/syp/react18/packages/react/react-reconciler/src/fiber.ts","C:/syp/react18/packages/react/react-dom/src/hostConfig.ts","C:/syp/react18/packages/react/react-reconciler/src/workTags.ts","C:/syp/react18/packages/react/react-reconciler/src/fiberFlags.ts"]}
