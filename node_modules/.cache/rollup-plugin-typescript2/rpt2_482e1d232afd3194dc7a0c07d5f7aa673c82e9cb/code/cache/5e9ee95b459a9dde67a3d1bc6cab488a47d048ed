{"code":"import { FunctionComponent, HostComponent } from './workTags';\nimport { NoFlags } from './fiberFlags';\nexport class FiberNode {\n    tag;\n    pendingProps;\n    key;\n    stateNode;\n    type;\n    // 指向树状结构\n    return;\n    sibling;\n    child;\n    index;\n    ref;\n    // 作为工作单元\n    memoizedProps;\n    alternate;\n    flags;\n    updateQueue;\n    subtreeFlags;\n    memoizedState;\n    constructor(tag, pendingProps, key) {\n        // 实例\n        this.tag = tag;\n        this.pendingProps = pendingProps;\n        this.key = key;\n        this.stateNode = null;\n        this.type = null;\n        // 指向树状结构\n        this.return = null;\n        this.sibling = null;\n        this.child = null;\n        this.index = 0;\n        this.ref = null;\n        // 作为工作单元\n        this.pendingProps = pendingProps;\n        this.memoizedProps = null;\n        this.memoizedState = null;\n        this.alternate = null;\n        // 副作用\n        this.flags = NoFlags;\n        this.subtreeFlags = NoFlags;\n        this.updateQueue = null;\n    }\n}\nexport class FiberRootNode {\n    container;\n    current;\n    finishedWork;\n    constructor(container, hostRootFiber) {\n        this.container = container;\n        this.current = hostRootFiber;\n        hostRootFiber.stateNode = this;\n        this.finishedWork = null;\n    }\n}\nexport const createWorkInProgress = (current, pendingProps) => {\n    let wip = current.alternate;\n    if (wip === null) {\n        // mount\n        wip = new FiberNode(current.tag, pendingProps, current.key);\n        wip.stateNode = current.stateNode;\n        wip.alternate = current;\n        current.alternate = wip;\n    }\n    else {\n        // update\n        wip.pendingProps = pendingProps;\n        wip.flags = NoFlags;\n        wip.subtreeFlags = NoFlags;\n    }\n    wip.type = current.type;\n    wip.updateQueue = current.updateQueue;\n    wip.child = current.child;\n    wip.memoizedProps = current.memoizedProps;\n    wip.memoizedState = current.memoizedState;\n    return wip;\n};\nexport function createFiberFromElement(element) {\n    const { type, key, props } = element;\n    let fiberTag = FunctionComponent;\n    if (typeof type === 'string') {\n        fiberTag = HostComponent;\n    }\n    else if (typeof type !== 'function' && __DEV__) {\n        console.warn('未实现的type类型', element);\n    }\n    const fiber = new FiberNode(fiberTag, props, key);\n    fiber.type = type;\n    return fiber;\n}\n","references":["C:/syp/react18/packages/shared/ReactTypes.ts","C:/syp/react18/packages/react/react-reconciler/src/workTags.ts","C:/syp/react18/packages/react/react-reconciler/src/fiberFlags.ts","C:/syp/react18/packages/react/react-dom/src/hostConfig.ts"]}
