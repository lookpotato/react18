{"code":"import { processUpdateQueue } from \"./updateQueue\";\nimport { HostComponent, HostRoot, HostText } from \"./workTags\";\nimport { mountChildFibers, reconcileChildFibers } from \"./childFibers\";\nexport function beginWork(wip, renderLanes) {\n    // 比较，返回子fiberNode\n    switch (wip.tag) {\n        case HostRoot:\n            return updateHostRoot(wip, renderLanes);\n        case HostComponent:\n            return updateHostComponent(wip);\n        case HostText:\n            return null;\n        default:\n            if (__DEV__) {\n                console.warn('beginWork未实现的类型');\n            }\n            break;\n    }\n    return null;\n}\nfunction updateHostRoot(wip, renderLanes) {\n    const baseState = wip.memoizedState;\n    const updateQueue = wip.updateQueue;\n    const pending = updateQueue.shared.pending;\n    updateQueue.shared.pending = null;\n    const { memoizedState } = processUpdateQueue(baseState, pending);\n    wip.memoizedState = memoizedState;\n    const nextChildren = wip.memoizedState;\n    reconcileChildren(wip, nextChildren);\n    return wip.child;\n}\nfunction updateHostComponent(wip) {\n    const nextProps = wip.pendingProps;\n    const nextChildren = nextProps.children;\n    reconcileChildren(wip, nextChildren);\n    return wip.child;\n}\nfunction reconcileChildren(wip, children) {\n    const current = wip.alternate;\n    if (current !== null) {\n        // update\n        wip.child = reconcileChildFibers(wip, current?.child, children);\n    }\n    else {\n        // mount\n        wip.child = mountChildFibers(wip, null, children);\n    }\n}\n","references":["C:/syp/react18/packages/shared/ReactTypes.ts","C:/syp/react18/packages/react/react-reconciler/src/fiber.ts","C:/syp/react18/packages/react/react-reconciler/src/updateQueue.ts","C:/syp/react18/packages/react/react-reconciler/src/workTags.ts","C:/syp/react18/packages/react/react-reconciler/src/childFibers.ts"]}
