{"code":"import { REACT_ELEMENT_TYPE } from '../../shared/ReactSymbols';\n// ReactElement\nconst ReactElement = function (type, key, ref, props) {\n    const element = {\n        // The type of the element, e.g., 'div', 'span', or a component\n        type: type,\n        // The key is used to help React identify which items have changed, are added, or are removed\n        key: key,\n        // The ref is used to reference a DOM element or a class component\n        ref: ref,\n        // The props are the properties or attributes of the element\n        props: props,\n        // A special property to identify this as a React Element\n        $$typeof: REACT_ELEMENT_TYPE,\n        __mark: 'KaSong'\n    };\n    return element;\n};\nexport const jsx = (type, config, ...maybeChildren) => {\n    let key = null;\n    let ref = null;\n    const props = {};\n    for (const prop in config) {\n        const val = config[prop];\n        if (prop === 'key') {\n            if (val != undefined) {\n                key = '' + val;\n            }\n            continue;\n        }\n        if (prop === 'ref') {\n            if (val != undefined) {\n                ref = val;\n            }\n            continue;\n        }\n        if ({}.hasOwnProperty.call(config, prop)) {\n            props[prop] = val;\n        }\n    }\n    const maybeChildrenLength = maybeChildren.length;\n    if (maybeChildrenLength) {\n        props.children = maybeChildrenLength === 1 ? maybeChildren[0] : maybeChildren;\n    }\n    return ReactElement(type, key, ref, props);\n};\nexport const jsxDEV = jsx;\n","references":["C:/syp/react18/packages/shared/ReactSymbols.ts","C:/syp/react18/packages/shared/ReactTypes.ts"]}
