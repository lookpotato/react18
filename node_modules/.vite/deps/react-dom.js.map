{
  "version": 3,
  "sources": ["../../../packages/react-dom/src/root.ts", "../../../packages/react-reconciler/src/workTags.ts", "../../../packages/react-reconciler/src/fiberFlags.ts", "../../../packages/react-reconciler/src/fiber.ts", "../../../packages/react-reconciler/src/updateQueue.ts", "../../../packages/react-reconciler/src/childFibers.ts", "../../../packages/react-reconciler/src/beginWork.ts", "../../../packages/react-dom/src/hostConfig.ts", "../../../packages/react-reconciler/src/completeWork.ts", "../../../packages/react-reconciler/src/commitWork.ts", "../../../packages/react-reconciler/src/workLoop.ts", "../../../packages/react-reconciler/src/fiberReconciler.ts", "../../../packages/react-dom/index.ts"],
  "sourcesContent": ["import { createContainer, updateContainer } from \"../../react-reconciler/src/fiberReconciler\";\r\nimport { Container } from \"./hostConfig\";\r\nimport { ReactElementType } from \"shared/ReactTypes\";\r\n\r\nexport function createRoot(container: Container) {\r\n  const root = createContainer(container);\r\n  return {\r\n    render(element: ReactElementType) {\r\n      updateContainer(element, root);\r\n    }\r\n  };\r\n}\r\n", "export type WorkTag = typeof FunctionComponent | typeof HostRoot | typeof HostComponent | typeof HostText\r\n\r\nexport const FunctionComponent = 0;\r\nexport const HostRoot = 3;\r\nexport const HostComponent = 5;\r\nexport const HostText = 6;\r\n", "export type Flags = number;\r\nexport const NoFlags = 0b000000;\r\nexport const Placement = 0b000001;\r\nexport const Update = 0b000010;\r\nexport const ChildDeletion = 0b000100;\r\nexport const MutationMask = Placement | Update | ChildDeletion;\r\n\r\n", "import { Props, Key, Ref, ReactElementType } from 'shared/ReactTypes';\r\nimport { FunctionComponent, WorkTag, HostComponent } from './workTags';\r\nimport { Flags, NoFlags } from './fiberFlags';\r\nimport { Container } from '../../react-dom/src/hostConfig';\r\n\r\n\r\nexport class FiberNode {\r\n  tag: WorkTag;\r\n  pendingProps: Props;\r\n  key: Key;\r\n  stateNode: any;\r\n  type: any;\r\n  // 指向树状结构\r\n  return: FiberNode | null;\r\n  sibling: FiberNode | null;\r\n  child: FiberNode | null;\r\n  index: number;\r\n  ref: Ref | null;\r\n  // 作为工作单元\r\n  memoizedProps: Props | null;\r\n  alternate: FiberNode | null;\r\n  flags: Flags;\r\n  updateQueue: unknown;\r\n  subtreeFlags: Flags;\r\n  memoizedState: any;\r\n  constructor(tag: WorkTag, pendingProps: Props, key: Key) {\r\n    // 实例\r\n    this.tag = tag;\r\n    this.pendingProps = pendingProps;\r\n    this.key = key;\r\n    this.stateNode = null;\r\n    this.type = null;\r\n    // 指向树状结构\r\n    this.return = null;\r\n    this.sibling = null;\r\n    this.child = null;\r\n    this.index = 0;\r\n    this.ref = null;\r\n\r\n    // 作为工作单元\r\n    this.pendingProps = pendingProps;\r\n    this.memoizedProps = null;\r\n    this.memoizedState = null;\r\n    this.alternate = null;\r\n    // 副作用\r\n    this.flags = NoFlags;\r\n    this.subtreeFlags = NoFlags;\r\n    this.updateQueue = null;\r\n  }\r\n}\r\n\r\nexport class FiberRootNode {\r\n  container: Container;\r\n  current: FiberNode;\r\n  finishedWork: FiberNode | null;\r\n  constructor(container: Container, hostRootFiber: FiberNode) {\r\n    this.container = container;\r\n    this.current = hostRootFiber;\r\n    hostRootFiber.stateNode = this;\r\n    this.finishedWork = null;\r\n  }\r\n}\r\n\r\nexport const createWorkInProgress = (current: FiberNode, pendingProps: Props): FiberNode => {\r\n  let wip = current.alternate;\r\n  if (wip === null) {\r\n    // mount\r\n    wip = new FiberNode(current.tag, pendingProps, current.key);\r\n    wip.stateNode = current.stateNode;\r\n    wip.alternate = current;\r\n    current.alternate = wip;\r\n  } else {\r\n    // update\r\n    wip.pendingProps = pendingProps;\r\n    wip.flags = NoFlags;\r\n    wip.subtreeFlags = NoFlags;\r\n  }\r\n  wip.type = current.type;\r\n  wip.updateQueue = current.updateQueue;\r\n  wip.child = current.child;\r\n  wip.memoizedProps = current.memoizedProps;\r\n  wip.memoizedState = current.memoizedState;\r\n  return wip;\r\n}\r\n\r\nexport function createFiberFromElement(element: ReactElementType): FiberNode {\r\n  const { type, key, props } = element;\r\n  let fiberTag: WorkTag = FunctionComponent;\r\n  if (typeof type === 'string') {\r\n    fiberTag = HostComponent;\r\n  } else if (typeof type !== 'function' && __DEV__) {\r\n    console.warn('未实现的type类型', element);\r\n  }\r\n  const fiber = new FiberNode(fiberTag, props, key);\r\n  fiber.type = type;\r\n  return fiber;\r\n}\r\n", "import { Action } from \"shared/ReactTypes\";  \r\n\r\nexport interface Update<State> {\r\n  action: Action<State>;\r\n}\r\n\r\nexport interface UpdateQueue<State> {\r\n  shared: {\r\n    pending: Update<State> | null,\r\n  }\r\n}\r\n\r\nexport const createUpdate = <State>(action: Action<State>): Update<State> => {\r\n  return { action };\r\n}\r\n\r\nexport const createUpdateQueue = <State>() => {\r\n  return {\r\n    shared: { pending: null },\r\n  } as UpdateQueue<State>;\r\n}\r\n\r\nexport const enqueueUpdate = <State>(updateQueue: UpdateQueue<State>, update: Update<State>) => {\r\n  updateQueue.shared.pending = update;\r\n}\r\n\r\nexport const processUpdateQueue = <State>(baseState: State, pendingUpdate: Update<State> | null): {\r\n  memoizedState: State,\r\n} => {\r\n  const result: ReturnType<typeof processUpdateQueue<State>> = {\r\n    memoizedState: baseState,\r\n  };\r\n  if (pendingUpdate !== null) {\r\n    const action = pendingUpdate.action;\r\n    if (action instanceof Function) {\r\n      result.memoizedState = action(baseState);\r\n    } else {\r\n      result.memoizedState = action;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n\r\n", "import { REACT_ELEMENT_TYPE } from \"shared/ReactSymbols\";\r\nimport { createFiberFromElement, FiberNode } from \"./fiber\";\r\nimport { ReactElementType } from \"shared/ReactTypes\";\r\nimport { HostText } from \"./workTags\";\r\nimport { Placement } from \"./fiberFlags\";\r\n\r\nfunction ChildReconciler(shouldTrackEffects: boolean) {\r\n  function reconcileSingleElement(returnFiber: FiberNode, currentFirstChild: FiberNode | null, element: ReactElementType) {\r\n    const fiber = createFiberFromElement(element);\r\n    fiber.return = returnFiber;\r\n    return fiber;\r\n  }\r\n\r\n  function reconcileSingleTextNode(returnFiber: FiberNode, currentFirstChild: FiberNode | null, content: string | number) {\r\n    const fiber = new FiberNode(HostText, { content }, null);\r\n    fiber.return = returnFiber;\r\n    return fiber;\r\n  }\r\n\r\n  function placeSingleChild(fiber: FiberNode) {\r\n    if (shouldTrackEffects && fiber.alternate === null) {\r\n      fiber.flags |= Placement;\r\n    }\r\n    return fiber;\r\n  }\r\n\r\n  return function reconcileChildFibers(returnFiber: FiberNode, currentFirstChild: FiberNode | null, newChild?: ReactElementType) {\r\n    // 判断当前Fiber的类型\r\n    if (typeof newChild === 'object' && newChild !== null) {\r\n      switch (newChild.$$typeof) {\r\n        case REACT_ELEMENT_TYPE:\r\n          return placeSingleChild(\r\n            reconcileSingleElement(returnFiber, currentFirstChild, newChild)\r\n          );\r\n        default:\r\n          if (__DEV__) {\r\n            console.warn('未实现的reconcile类型', newChild);\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    // 文本节点\r\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\r\n      return placeSingleChild(\r\n        reconcileSingleTextNode(returnFiber, currentFirstChild, newChild)\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n}\r\n\r\nexport const reconcileChildFibers = ChildReconciler(true);\r\nexport const mountChildFibers = ChildReconciler(false);", "import { ReactElementType, Type } from \"shared/ReactTypes\";\r\nimport { FiberNode } from \"./fiber\";\r\nimport { UpdateQueue, processUpdateQueue } from \"./updateQueue\";\r\nimport { HostComponent, HostRoot, HostText } from \"./workTags\";\r\nimport { mountChildFibers, reconcileChildFibers } from \"./childFibers\";\r\n\r\n// 定义 renderLanes 类型\r\ntype RenderLanes = number;\r\n\r\nexport function beginWork(wip: FiberNode, renderLanes: RenderLanes) {\r\n  // 比较，返回子fiberNode\r\n  switch (wip.tag) {\r\n    case HostRoot:\r\n      return updateHostRoot(wip, renderLanes);\r\n    case HostComponent:\r\n      return updateHostComponent(wip);\r\n    case HostText:\r\n      return null;\r\n    case FunctionComponent:\r\n      return updateFunctionComponent(wip);\r\n    default:\r\n      if (__DEV__) {\r\n        console.warn('beginWork未实现的类型');\r\n      }\r\n      break;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction updateHostRoot(wip: FiberNode, renderLanes: RenderLanes) {\r\n  const baseState = wip.memoizedState;\r\n  const updateQueue = wip.updateQueue as UpdateQueue<Element>;\r\n  const pending = updateQueue.shared.pending;\r\n  updateQueue.shared.pending = null;\r\n  const { memoizedState } = processUpdateQueue(baseState, pending);\r\n  wip.memoizedState = memoizedState;\r\n\r\n  const nextChildren = wip.memoizedState;\r\n  reconcileChildren(wip, nextChildren);\r\n  return wip.child;\r\n}\r\n\r\nfunction updateHostComponent(wip: FiberNode) {\r\n  const nextProps = wip.pendingProps;\r\n  const nextChildren = nextProps.children;\r\n  reconcileChildren(wip, nextChildren);\r\n  return wip.child;\r\n}\r\n\r\nfunction reconcileChildren(wip: FiberNode, children?: ReactElementType) {\r\n  const current = wip.alternate;\r\n\r\n  if (current !== null) {\r\n    // update\r\n    wip.child = reconcileChildFibers(wip, current?.child, children);\r\n  } else {\r\n    // mount\r\n    wip.child = mountChildFibers(wip, null, children);\r\n  }\r\n}\r\n\r\nfunction updateFunctionComponent(wip: FiberNode) {\r\n  const nextProps = wip.pendingProps;\r\n  const nextChildren = renderWithHooks(wip);\r\n\r\n  reconcileChildren(wip, nextChildren);\r\n  return wip.child;\r\n}\r\n", "\r\nexport type Container =  Element | Document | DocumentFragment;\r\nexport type Instance = any;\r\nexport type Text = any;\r\nexport type Props = any;\r\n\r\n// export function createInstance(type: string, props: any): Instance {\r\n  \r\nexport function createInstance(type: string): Instance {\r\n  // TODO: 创建DOM\r\n  const element = document.createElement(type);\r\n  return element;\r\n}\r\n\r\nexport const appendInitialChild = (parent: Instance, child: Instance) => {\r\n  // TODO: 添加子节点\r\n  parent.appendChild(child);\r\n}\r\n\r\nexport const createTextInstance = (content: string) => {\r\n  // TODO: 添加子节点\r\n  return document.createTextNode(content);\r\n}\r\n\r\nexport const appendChildToContainer = appendInitialChild;\r\n\r\n", "import { FiberNode } from './fiber';\r\nimport { \r\n  createInstance, \r\n  createTextInstance, \r\n  appendInitialChild \r\n} from '../../react-dom/src/hostConfig';\r\nimport { HostComponent, HostText, HostRoot, FunctionComponent } from './workTags';\r\nimport { NoFlags } from './fiberFlags';\r\n\r\nexport const completeWork = (wip: FiberNode) => {\r\n  // 递归中的归\r\n  const newProps = wip.pendingProps;\r\n  const current = wip.alternate;\r\n\r\n  switch (wip.tag) {\r\n    case HostComponent:\r\n      if (current !== null && wip.stateNode) {\r\n        // update\r\n      } else {\r\n        // 1. 构建DOM\r\n        // 2. 将DOM插入到DOM树中\r\n        const instance = createInstance(wip.type);\r\n        appendAllChildren(instance, wip);\r\n        wip.stateNode = instance;\r\n      }\r\n      bubbleProperties(wip);\r\n      return null;\r\n    case HostText:\r\n      if (current !== null && wip.stateNode) {\r\n        // update\r\n      } else {\r\n        // mount\r\n        const instance = createTextInstance(newProps.content);\r\n        wip.stateNode = instance;\r\n      }\r\n      bubbleProperties(wip);\r\n      return null;\r\n    case HostRoot:\r\n      bubbleProperties(wip);\r\n      return null;\r\n    case FunctionComponent:\r\n      bubbleProperties(wip)\r\n      return null;\r\n    default:\r\n      if (__DEV__) {\r\n        console.warn('未处理的completeWork类型', wip);\r\n      }\r\n      return null;\r\n  }\r\n};\r\n\r\nfunction appendAllChildren(parent: Element, wip: FiberNode) {\r\n  let node = wip.child;\r\n\r\n  while (node !== null) {\r\n    if (node.tag === HostComponent || node.tag === HostText) {\r\n      if (node.stateNode) {\r\n        appendInitialChild(parent, node.stateNode);\r\n      }\r\n    } else if (node.child !== null) {\r\n      node.child.return = node;\r\n      node = node.child;\r\n      continue;\r\n    }\r\n\r\n    if (node === wip) {\r\n      return;\r\n    }\r\n\r\n    while (node.sibling === null) {\r\n      if (node.return === null || node.return === wip) {\r\n        return;\r\n      }\r\n      node = node.return;\r\n    }\r\n    node.sibling.return = node.return;\r\n    node = node.sibling;\r\n  }\r\n}\r\n\r\nfunction bubbleProperties(wip: FiberNode) {\r\n  let subtreeFlags = NoFlags;\r\n  let child = wip.child;\r\n\r\n  while (child !== null) {\r\n    subtreeFlags |= child.subtreeFlags;\r\n    subtreeFlags |= child.flags;\r\n    child.return = wip;\r\n    child = child.sibling;\r\n  }\r\n  wip.subtreeFlags = subtreeFlags;\r\n}\r\n", "import { FiberNode, FiberRootNode } from \"./fiber\";\r\nimport { MutationMask, NoFlags, Placement } from \"./fiberFlags\";\r\nimport { appendChildToContainer, Container } from \"../../react-dom/src/hostConfig\";\r\nimport { HostComponent, HostRoot, HostText } from \"./workTags\";\r\n\r\nlet nextEffect: FiberNode | null = null;\r\n\r\nexport const commitMutationEffects = (finishedWork: FiberNode) => {\r\n  nextEffect = finishedWork;\r\n\r\n  while (nextEffect !== null) {\r\n    // 向下遍历\r\n    const child: FiberNode | null = nextEffect.child;\r\n\r\n    if (\r\n      (nextEffect.subtreeFlags & MutationMask) !== NoFlags &&\r\n      child !== null\r\n    ) {\r\n      nextEffect = child;\r\n    } else {\r\n      // 向上遍历 DFS\r\n      up: while (nextEffect !== null) {\r\n        commitMutationEffectsOnFiber(nextEffect);\r\n        const sibling: FiberNode | null = nextEffect.sibling;\r\n\r\n        if (sibling !== null) {\r\n          nextEffect = sibling;\r\n          break up;\r\n        }\r\n        nextEffect = nextEffect.return;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction commitMutationEffectsOnFiber(finishedWork: FiberNode) {\r\n  const flags = finishedWork.flags;\r\n\r\n  if ((flags & Placement) !== NoFlags) {\r\n    commitPlacement(finishedWork);\r\n    finishedWork.flags &= ~Placement;\r\n  }\r\n}\r\n\r\nfunction commitPlacement(finishedWork: FiberNode) {\r\n  if (__DEV__) {\r\n    console.warn('执行Placement操作', finishedWork);\r\n  }\r\n  // parent DOM\r\n  const hostParent = getHostParent(finishedWork);\r\n  // finishedWork ~~ DOM\r\n  if (hostParent !== null) {\r\n    appendPlacementNodeIntoContainer(finishedWork, hostParent);\r\n  }\r\n}\r\n\r\nfunction getHostParent(fiber: FiberNode): Container | null {\r\n  let parent = fiber.return;\r\n\r\n  while (parent) {\r\n    const parentTag = parent.tag;\r\n    // HostComponent HostRoot\r\n    if (parentTag === HostComponent) {\r\n      return parent.stateNode as Container;\r\n    }\r\n    if (parentTag === HostRoot) {\r\n      return (parent.stateNode as FiberRootNode).container;\r\n    }\r\n    parent = parent.return;\r\n  }\r\n  if (__DEV__) {\r\n    console.warn('未找到host parent');\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction appendPlacementNodeIntoContainer(\r\n  finishedWork: FiberNode,\r\n  hostParent: Container\r\n) {\r\n  // fiber host\r\n  if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {\r\n    appendChildToContainer(hostParent, finishedWork.stateNode);\r\n    return;\r\n  }\r\n  const child = finishedWork.child;\r\n  if (child !== null) {\r\n    appendPlacementNodeIntoContainer(child, hostParent);\r\n    let sibling = child.sibling;\r\n\r\n    while (sibling !== null) {\r\n      appendPlacementNodeIntoContainer(sibling, hostParent);\r\n      sibling = sibling.sibling;\r\n    }\r\n  }\r\n}\r\n\r\nexport function commitRoot(root: FiberRootNode) {\r\n  const finishedWork = root.finishedWork;\r\n\r\n  if (finishedWork === null) {\r\n    return;\r\n  }\r\n\r\n  if (__DEV__) {\r\n    console.log('commit阶段开始', finishedWork);\r\n  }\r\n\r\n  // 重置\r\n  root.finishedWork = null;\r\n\r\n  // 判断是否存在3个子阶段需要执行的操作\r\n  const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;\r\n  const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;\r\n\r\n  if (subtreeHasEffect || rootHasEffect) {\r\n    // beforeMutation\r\n    // mutation\r\n    commitMutationEffects(finishedWork);\r\n    root.current = finishedWork;\r\n    // layout\r\n  } else {\r\n    root.current = finishedWork;\r\n  }\r\n}\r\n", "import { beginWork } from \"./beginWork\";\r\nimport { createWorkInProgress, FiberNode, FiberRootNode } from \"./fiber\";\r\nimport { completeWork } from \"./completeWork\";\r\nimport { HostRoot } from \"./workTags\";\r\nimport { commitRoot, commitMutationEffects } from \"./commitWork\";\r\nimport { MutationMask, NoFlags } from \"./fiberFlags\";\r\n\r\nlet workInProgressRenderLanes: number = 0;\r\nconst NoLanes = 0;\r\n\r\nlet workInProgress: FiberNode | null = null;\r\n\r\nfunction prepareFreshStack(root: FiberRootNode) {\r\n  workInProgress = createWorkInProgress(root.current, {});\r\n  workInProgressRenderLanes = NoLanes;\r\n}\r\n\r\nexport function scheduleUpdateOnFiber(fiber: FiberNode) {\r\n  // 调度\r\n  const root = markUpdateFromFiberToRoot(fiber);\r\n  if (root !== null) {\r\n    renderRoot(root);\r\n  }\r\n}\r\n\r\nfunction markUpdateFromFiberToRoot(fiber: FiberNode) {\r\n  let node = fiber;\r\n  let parent = node.return;\r\n  while (parent !== null) {\r\n    node = parent;\r\n    parent = node.return;\r\n  }\r\n  if (node.tag === HostRoot) {\r\n    return node.stateNode as FiberRootNode;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction renderRoot(root: FiberRootNode) {\r\n  // 初始化\r\n  prepareFreshStack(root);\r\n\r\n  do {\r\n    try {\r\n      workLoop();\r\n      break;\r\n    } catch (e) {\r\n      if (__DEV__) {\r\n        console.warn('workLoop发生错误', e);\r\n      }\r\n      workInProgress = null;\r\n    }\r\n  } while (true);\r\n\r\n  const finishedWork = root.current.alternate;\r\n  root.finishedWork = finishedWork;\r\n\r\n  // wip fiber树 变成 fiberRootNode树\r\n  commitRoot(root);\r\n}\r\n\r\nfunction workLoop() {\r\n  while (workInProgress !== null) {\r\n    performUnitOfWork(workInProgress);\r\n  }\r\n}\r\n\r\nfunction performUnitOfWork(fiber: FiberNode) {\r\n  const next = beginWork(fiber, workInProgressRenderLanes);\r\n  fiber.memoizedProps = fiber.pendingProps;\r\n  \r\n  if (next === null) {\r\n    completeUnitOfWork(fiber);\r\n  } else {\r\n    workInProgress = next;\r\n  }\r\n}\r\n\r\nfunction completeUnitOfWork(fiber: FiberNode) {\r\n  let node: FiberNode | null = fiber;\r\n  \r\n  do {\r\n    completeWork(node);\r\n    const sibling = node.sibling;\r\n    \r\n    if (sibling !== null) {\r\n      workInProgress = sibling;\r\n      return;\r\n    }\r\n    node = node.return;\r\n    workInProgress = node;\r\n  } while (node !== null);\r\n}\r\n", "import { FiberNode, FiberRootNode } from \"./fiber\";\r\nimport { Container } from \"../../react-dom/src/hostConfig\";\r\nimport { HostRoot } from \"./workTags\";\r\nimport { ReactElementType } from \"shared/ReactTypes\";\r\n\r\nimport { \r\n  createUpdateQueue, \r\n  createUpdate, \r\n  enqueueUpdate,\r\n  UpdateQueue\r\n} from \"./updateQueue\";\r\nimport { scheduleUpdateOnFiber } from \"./workLoop\";\r\n\r\nexport function createContainer(container: Container) {\r\n  const hostRootFiber = new FiberNode(HostRoot, {}, null);\r\n  const root = new FiberRootNode(container, hostRootFiber);\r\n  hostRootFiber.updateQueue = createUpdateQueue();\r\n  return root;\r\n}\r\n\r\nexport function updateContainer(element: ReactElementType, root: FiberRootNode) {\r\n  const hostRootFiber = root.current;\r\n  const update = createUpdate<ReactElementType>(element);\r\n  enqueueUpdate(hostRootFiber.updateQueue as UpdateQueue<ReactElementType>, update);\r\n  scheduleUpdateOnFiber(hostRootFiber);\r\n  return element;\r\n}\r\n", "import * as ReactDOM from './src/root'\r\n\r\nexport default ReactDOM;"],
  "mappings": "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",
  "names": ["FunctionComponent", "FunctionComponent", "reconcileChildFibers", "FunctionComponent"]
}
